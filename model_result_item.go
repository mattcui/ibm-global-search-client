/*
 * Global Search
 *
 * Search for resources with the global and shared resource properties repository integrated in the IBM Cloud platform. The search repository stores and searches cloud resources attributes, which categorize or classify resources. A resource is a physical or logical component that can be created or reserved for an application or service instance and is owned by resource providers, such as Cloud Foundry, IBM Kubernetes Service, or resource controller in IBM Cloud. Resources are uniquely identified by a Cloud Resource Name (CRN)  or by an IMS ID. The properties of a resource include tags and system properties. Both properties are defined in an IBM Cloud billing account, and span across many regions.
 *
 * API version: 2.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResultItem A resource returned in a search result
type ResultItem struct {
	// Resource identifier in CRN format.
	Crn *string `json:"crn,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ResultItem ResultItem

// NewResultItem instantiates a new ResultItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultItem() *ResultItem {
	this := ResultItem{}
	return &this
}

// NewResultItemWithDefaults instantiates a new ResultItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultItemWithDefaults() *ResultItem {
	this := ResultItem{}
	return &this
}

// GetCrn returns the Crn field value if set, zero value otherwise.
func (o *ResultItem) GetCrn() string {
	if o == nil || o.Crn == nil {
		var ret string
		return ret
	}
	return *o.Crn
}

// GetCrnOk returns a tuple with the Crn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultItem) GetCrnOk() (*string, bool) {
	if o == nil || o.Crn == nil {
		return nil, false
	}
	return o.Crn, true
}

// HasCrn returns a boolean if a field has been set.
func (o *ResultItem) HasCrn() bool {
	if o != nil && o.Crn != nil {
		return true
	}

	return false
}

// SetCrn gets a reference to the given string and assigns it to the Crn field.
func (o *ResultItem) SetCrn(v string) {
	o.Crn = &v
}

func (o ResultItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Crn != nil {
		toSerialize["crn"] = o.Crn
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ResultItem) UnmarshalJSON(bytes []byte) (err error) {
	varResultItem := _ResultItem{}

	if err = json.Unmarshal(bytes, &varResultItem); err == nil {
		*o = ResultItem(varResultItem)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "crn")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResultItem struct {
	value *ResultItem
	isSet bool
}

func (v NullableResultItem) Get() *ResultItem {
	return v.value
}

func (v *NullableResultItem) Set(val *ResultItem) {
	v.value = val
	v.isSet = true
}

func (v NullableResultItem) IsSet() bool {
	return v.isSet
}

func (v *NullableResultItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultItem(val *ResultItem) *NullableResultItem {
	return &NullableResultItem{value: val, isSet: true}
}

func (v NullableResultItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


