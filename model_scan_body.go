/*
 * Global Search
 *
 * Search for resources with the global and shared resource properties repository integrated in the IBM Cloud platform. The search repository stores and searches cloud resources attributes, which categorize or classify resources. A resource is a physical or logical component that can be created or reserved for an application or service instance and is owned by resource providers, such as Cloud Foundry, IBM Kubernetes Service, or resource controller in IBM Cloud. Resources are uniquely identified by a Cloud Resource Name (CRN)  or by an IMS ID. The properties of a resource include tags and system properties. Both properties are defined in an IBM Cloud billing account, and span across many regions.
 *
 * API version: 2.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ScanBody The request body associated with a search request.
type ScanBody struct {
	// The Lucene-formatted query string. Default to '*' if not set
	Query *string `json:"query,omitempty"`
	// The list of the fields returned by the search. Defaults to all. `crn` is always returned.
	Fields *[]string `json:"fields,omitempty"`
	// An opaque search cursor that is returned on each operation call and that must be set on next call.
	SearchCursor *string `json:"search_cursor,omitempty"`
}

// NewScanBody instantiates a new ScanBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScanBody() *ScanBody {
	this := ScanBody{}
	return &this
}

// NewScanBodyWithDefaults instantiates a new ScanBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScanBodyWithDefaults() *ScanBody {
	this := ScanBody{}
	return &this
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *ScanBody) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanBody) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *ScanBody) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *ScanBody) SetQuery(v string) {
	o.Query = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *ScanBody) GetFields() []string {
	if o == nil || o.Fields == nil {
		var ret []string
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanBody) GetFieldsOk() (*[]string, bool) {
	if o == nil || o.Fields == nil {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *ScanBody) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given []string and assigns it to the Fields field.
func (o *ScanBody) SetFields(v []string) {
	o.Fields = &v
}

// GetSearchCursor returns the SearchCursor field value if set, zero value otherwise.
func (o *ScanBody) GetSearchCursor() string {
	if o == nil || o.SearchCursor == nil {
		var ret string
		return ret
	}
	return *o.SearchCursor
}

// GetSearchCursorOk returns a tuple with the SearchCursor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScanBody) GetSearchCursorOk() (*string, bool) {
	if o == nil || o.SearchCursor == nil {
		return nil, false
	}
	return o.SearchCursor, true
}

// HasSearchCursor returns a boolean if a field has been set.
func (o *ScanBody) HasSearchCursor() bool {
	if o != nil && o.SearchCursor != nil {
		return true
	}

	return false
}

// SetSearchCursor gets a reference to the given string and assigns it to the SearchCursor field.
func (o *ScanBody) SetSearchCursor(v string) {
	o.SearchCursor = &v
}

func (o ScanBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	if o.SearchCursor != nil {
		toSerialize["search_cursor"] = o.SearchCursor
	}
	return json.Marshal(toSerialize)
}

type NullableScanBody struct {
	value *ScanBody
	isSet bool
}

func (v NullableScanBody) Get() *ScanBody {
	return v.value
}

func (v *NullableScanBody) Set(val *ScanBody) {
	v.value = val
	v.isSet = true
}

func (v NullableScanBody) IsSet() bool {
	return v.isSet
}

func (v *NullableScanBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScanBody(val *ScanBody) *NullableScanBody {
	return &NullableScanBody{value: val, isSet: true}
}

func (v NullableScanBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScanBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


