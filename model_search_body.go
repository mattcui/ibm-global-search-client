/*
 * Global Search
 *
 * Search for resources with the global and shared resource properties repository integrated in the IBM Cloud platform. The search repository stores and searches cloud resources attributes, which categorize or classify resources. A resource is a physical or logical component that can be created or reserved for an application or service instance and is owned by resource providers, such as Cloud Foundry, IBM Kubernetes Service, or resource controller in IBM Cloud. Resources are uniquely identified by a Cloud Resource Name (CRN)  or by an IMS ID. The properties of a resource include tags and system properties. Both properties are defined in an IBM Cloud billing account, and span across many regions.
 *
 * API version: 2.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SearchBody search body
type SearchBody struct {
	// The query string
	Query []string `json:"query"`
	// The list of the fields that are returned by the search. The CRN is always returned.
	Fields *[]string `json:"fields,omitempty"`
	// An opaque token. Initially set to null or undefined, then pass the value returned by the previous call
	Token *string `json:"token,omitempty"`
}

// NewSearchBody instantiates a new SearchBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchBody(query []string) *SearchBody {
	this := SearchBody{}
	this.Query = query
	return &this
}

// NewSearchBodyWithDefaults instantiates a new SearchBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchBodyWithDefaults() *SearchBody {
	this := SearchBody{}
	return &this
}

// GetQuery returns the Query field value
func (o *SearchBody) GetQuery() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *SearchBody) GetQueryOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *SearchBody) SetQuery(v []string) {
	o.Query = v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *SearchBody) GetFields() []string {
	if o == nil || o.Fields == nil {
		var ret []string
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBody) GetFieldsOk() (*[]string, bool) {
	if o == nil || o.Fields == nil {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *SearchBody) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given []string and assigns it to the Fields field.
func (o *SearchBody) SetFields(v []string) {
	o.Fields = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *SearchBody) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBody) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *SearchBody) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *SearchBody) SetToken(v string) {
	o.Token = &v
}

func (o SearchBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["query"] = o.Query
	}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	return json.Marshal(toSerialize)
}

type NullableSearchBody struct {
	value *SearchBody
	isSet bool
}

func (v NullableSearchBody) Get() *SearchBody {
	return v.value
}

func (v *NullableSearchBody) Set(val *SearchBody) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchBody) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchBody(val *SearchBody) *NullableSearchBody {
	return &NullableSearchBody{value: val, isSet: true}
}

func (v NullableSearchBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


