/*
 * Global Search
 *
 * Search for resources with the global and shared resource properties repository integrated in the IBM Cloud platform. The search repository stores and searches cloud resources attributes, which categorize or classify resources. A resource is a physical or logical component that can be created or reserved for an application or service instance and is owned by resource providers, such as Cloud Foundry, IBM Kubernetes Service, or resource controller in IBM Cloud. Resources are uniquely identified by a Cloud Resource Name (CRN)  or by an IMS ID. The properties of a resource include tags and system properties. Both properties are defined in an IBM Cloud billing account, and span across many regions.
 *
 * API version: 2.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SearchResults The results of the requested search.
type SearchResults struct {
	// The array of results. Each item will represent a resource and will contains all visible properties associated with it.
	Items []ResultItem `json:"items"`
	// If false, there is no more data to retrieve on the next page. If true, it's possible that there is more data to retrieve on the next page.
	MoreData bool `json:"more_data"`
	// The search token to use on the next call.
	Token *string `json:"token,omitempty"`
	// It is set to true if the result is partial of an IAM error when validating user authorization on one or more resources. This field is DEPRECATED and will be removed in future versions of this API
	FilterError bool `json:"filter_error"`
	// Indicates if the result that is set might be partial or not. Value 0 means the result set is complete. A value greater than 0 means the result set might be incomplete. Its single bits identify the cause. The first bit means the error is in the IAM filter. The second bit means errors are in elasticsearch shards.
	PartialData int32 `json:"partial_data"`
	// Offset parameter specified by the user
	Offset int32 `json:"offset"`
	// Limit parameter specified by the user
	Limit int32 `json:"limit"`
}

// NewSearchResults instantiates a new SearchResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchResults(items []ResultItem, moreData bool, filterError bool, partialData int32, offset int32, limit int32) *SearchResults {
	this := SearchResults{}
	this.Items = items
	this.MoreData = moreData
	this.FilterError = filterError
	this.PartialData = partialData
	this.Offset = offset
	this.Limit = limit
	return &this
}

// NewSearchResultsWithDefaults instantiates a new SearchResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchResultsWithDefaults() *SearchResults {
	this := SearchResults{}
	return &this
}

// GetItems returns the Items field value
func (o *SearchResults) GetItems() []ResultItem {
	if o == nil {
		var ret []ResultItem
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *SearchResults) GetItemsOk() (*[]ResultItem, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Items, true
}

// SetItems sets field value
func (o *SearchResults) SetItems(v []ResultItem) {
	o.Items = v
}

// GetMoreData returns the MoreData field value
func (o *SearchResults) GetMoreData() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.MoreData
}

// GetMoreDataOk returns a tuple with the MoreData field value
// and a boolean to check if the value has been set.
func (o *SearchResults) GetMoreDataOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MoreData, true
}

// SetMoreData sets field value
func (o *SearchResults) SetMoreData(v bool) {
	o.MoreData = v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *SearchResults) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResults) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *SearchResults) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *SearchResults) SetToken(v string) {
	o.Token = &v
}

// GetFilterError returns the FilterError field value
func (o *SearchResults) GetFilterError() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FilterError
}

// GetFilterErrorOk returns a tuple with the FilterError field value
// and a boolean to check if the value has been set.
func (o *SearchResults) GetFilterErrorOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FilterError, true
}

// SetFilterError sets field value
func (o *SearchResults) SetFilterError(v bool) {
	o.FilterError = v
}

// GetPartialData returns the PartialData field value
func (o *SearchResults) GetPartialData() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PartialData
}

// GetPartialDataOk returns a tuple with the PartialData field value
// and a boolean to check if the value has been set.
func (o *SearchResults) GetPartialDataOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PartialData, true
}

// SetPartialData sets field value
func (o *SearchResults) SetPartialData(v int32) {
	o.PartialData = v
}

// GetOffset returns the Offset field value
func (o *SearchResults) GetOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *SearchResults) GetOffsetOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *SearchResults) SetOffset(v int32) {
	o.Offset = v
}

// GetLimit returns the Limit field value
func (o *SearchResults) GetLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *SearchResults) GetLimitOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *SearchResults) SetLimit(v int32) {
	o.Limit = v
}

func (o SearchResults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["items"] = o.Items
	}
	if true {
		toSerialize["more_data"] = o.MoreData
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if true {
		toSerialize["filter_error"] = o.FilterError
	}
	if true {
		toSerialize["partial_data"] = o.PartialData
	}
	if true {
		toSerialize["offset"] = o.Offset
	}
	if true {
		toSerialize["limit"] = o.Limit
	}
	return json.Marshal(toSerialize)
}

type NullableSearchResults struct {
	value *SearchResults
	isSet bool
}

func (v NullableSearchResults) Get() *SearchResults {
	return v.value
}

func (v *NullableSearchResults) Set(val *SearchResults) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResults) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResults(val *SearchResults) *NullableSearchResults {
	return &NullableSearchResults{value: val, isSet: true}
}

func (v NullableSearchResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


